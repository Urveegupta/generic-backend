package org.portal.db.entities.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.portal.db.entities.FormField;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

/**
 * Class _Form was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Form extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String FORM_ID_PK_COLUMN = "form_id";

    public static final Property<String> FORM_NAME = Property.create("formName", String.class);
    public static final Property<List<FormField>> FORM_FIELDS = Property.create("formFields", List.class);

    protected String formName;

    protected Object formFields;

    public void setFormName(String formName) {
        beforePropertyWrite("formName", this.formName, formName);
        this.formName = formName;
    }

    public String getFormName() {
        beforePropertyRead("formName");
        return this.formName;
    }

    public void addToFormFields(FormField obj) {
        addToManyTarget("formFields", obj, true);
    }

    public void removeFromFormFields(FormField obj) {
        removeToManyTarget("formFields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<FormField> getFormFields() {
        return (List<FormField>)readProperty("formFields");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "formName":
                return this.formName;
            case "formFields":
                return this.formFields;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "formName":
                this.formName = (String)val;
                break;
            case "formFields":
                this.formFields = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.formName);
        out.writeObject(this.formFields);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.formName = (String)in.readObject();
        this.formFields = in.readObject();
    }

}
