package org.portal.db.entities.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * Class _Leave was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Leave extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String LEAVE_ID_PK_COLUMN = "leave_id";

    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<String> END_DATE = Property.create("endDate", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> REASON = Property.create("reason", String.class);
    public static final Property<String> START_DATE = Property.create("startDate", String.class);

    protected String email;
    protected String endDate;
    protected String name;
    protected String reason;
    protected String startDate;


    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setEndDate(String endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public String getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setReason(String reason) {
        beforePropertyWrite("reason", this.reason, reason);
        this.reason = reason;
    }

    public String getReason() {
        beforePropertyRead("reason");
        return this.reason;
    }

    public void setStartDate(String startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public String getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "email":
                return this.email;
            case "endDate":
                return this.endDate;
            case "name":
                return this.name;
            case "reason":
                return this.reason;
            case "startDate":
                return this.startDate;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "email":
                this.email = (String)val;
                break;
            case "endDate":
                this.endDate = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "reason":
                this.reason = (String)val;
                break;
            case "startDate":
                this.startDate = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.email);
        out.writeObject(this.endDate);
        out.writeObject(this.name);
        out.writeObject(this.reason);
        out.writeObject(this.startDate);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.email = (String)in.readObject();
        this.endDate = (String)in.readObject();
        this.name = (String)in.readObject();
        this.reason = (String)in.readObject();
        this.startDate = (String)in.readObject();
    }

}
