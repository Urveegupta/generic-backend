package org.portal.db.entities.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String USER_ID_PK_COLUMN = "user_id";

    public static final Property<LocalDateTime> CREATE_TIME = Property.create("createTime", LocalDateTime.class);
    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<Integer> ROLE_ID = Property.create("roleId", Integer.class);
    public static final Property<String> USER_NAME = Property.create("userName", String.class);

    protected LocalDateTime createTime;
    protected String email;
    protected String password;
    protected Integer roleId;
    protected String userName;


    public void setCreateTime(LocalDateTime createTime) {
        beforePropertyWrite("createTime", this.createTime, createTime);
        this.createTime = createTime;
    }

    public LocalDateTime getCreateTime() {
        beforePropertyRead("createTime");
        return this.createTime;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setRoleId(int roleId) {
        beforePropertyWrite("roleId", this.roleId, roleId);
        this.roleId = roleId;
    }

    public int getRoleId() {
        beforePropertyRead("roleId");
        if(this.roleId == null) {
            return 0;
        }
        return this.roleId;
    }

    public void setUserName(String userName) {
        beforePropertyWrite("userName", this.userName, userName);
        this.userName = userName;
    }

    public String getUserName() {
        beforePropertyRead("userName");
        return this.userName;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "createTime":
                return this.createTime;
            case "email":
                return this.email;
            case "password":
                return this.password;
            case "roleId":
                return this.roleId;
            case "userName":
                return this.userName;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "createTime":
                this.createTime = (LocalDateTime)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "roleId":
                this.roleId = (Integer)val;
                break;
            case "userName":
                this.userName = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.createTime);
        out.writeObject(this.email);
        out.writeObject(this.password);
        out.writeObject(this.roleId);
        out.writeObject(this.userName);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.createTime = (LocalDateTime)in.readObject();
        this.email = (String)in.readObject();
        this.password = (String)in.readObject();
        this.roleId = (Integer)in.readObject();
        this.userName = (String)in.readObject();
    }

}
