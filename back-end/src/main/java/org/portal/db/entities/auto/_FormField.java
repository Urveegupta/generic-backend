package org.portal.db.entities.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.portal.db.entities.Form;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * Class _FormField was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _FormField extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String FIELD_ID_PK_COLUMN = "field_id";

    public static final Property<String> FIELD_NAME = Property.create("fieldName", String.class);
    public static final Property<String> FIELD_TYPE = Property.create("fieldType", String.class);
    public static final Property<String> INPUT_TYPE = Property.create("inputType", String.class);
    public static final Property<Form> FORM = Property.create("form", Form.class);

    protected String fieldName;
    protected String fieldType;
    protected String inputType;

    protected Object form;

    public void setFieldName(String fieldName) {
        beforePropertyWrite("fieldName", this.fieldName, fieldName);
        this.fieldName = fieldName;
    }

    public String getFieldName() {
        beforePropertyRead("fieldName");
        return this.fieldName;
    }

    public void setFieldType(String fieldType) {
        beforePropertyWrite("fieldType", this.fieldType, fieldType);
        this.fieldType = fieldType;
    }

    public String getFieldType() {
        beforePropertyRead("fieldType");
        return this.fieldType;
    }

    public void setInputType(String inputType) {
        beforePropertyWrite("inputType", this.inputType, inputType);
        this.inputType = inputType;
    }

    public String getInputType() {
        beforePropertyRead("inputType");
        return this.inputType;
    }

    public void setForm(Form form) {
        setToOneTarget("form", form, true);
    }

    public Form getForm() {
        return (Form)readProperty("form");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "fieldName":
                return this.fieldName;
            case "fieldType":
                return this.fieldType;
            case "inputType":
                return this.inputType;
            case "form":
                return this.form;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "fieldName":
                this.fieldName = (String)val;
                break;
            case "fieldType":
                this.fieldType = (String)val;
                break;
            case "inputType":
                this.inputType = (String)val;
                break;
            case "form":
                this.form = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.fieldName);
        out.writeObject(this.fieldType);
        out.writeObject(this.inputType);
        out.writeObject(this.form);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.fieldName = (String)in.readObject();
        this.fieldType = (String)in.readObject();
        this.inputType = (String)in.readObject();
        this.form = in.readObject();
    }

}
